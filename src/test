let R = require("ramda")
let reсentDBFile = "./todo.json"
let archiveDBFile = "./archive.json"
let FS = require("fs-extra")

//commands

let forEachI = R.addIndex(R.forEach)

let commands = {}

let writeFileReсent = R.curry((recentDBFile, todo) => {
  let str = typeof todo == "string" ? todo : JSON.stringify(todo, null, 2)
  FS.outputFileSync(recentDBFile, str, "utf-8")
})

let writeFileArchive = R.curry((archiveDBFile, todo) => {
  let str = typeof todo == "string" ? todo : JSON.stringify(todo, null, 2)
  FS.outputFileSync(archiveDBFile, str, "utf-8")
})

let logLine = (todo, i) => {
  console.log(
    todo.done == false ? `[ ] ${i + 1}. ${todo.text}` :
    todo.done == true  ? `[x] ${i + 1}. ${todo.text}` :
                              `` // ignore archived todos
  )
}
let logRecent = forEachI(logLine)

let logLineArchive = (todo, i) => {
  console.log(
    todo.done == true ? `[#] ${i + 1}. ${todo.text}` : ``
  )
}
let logArchive = forEachI(logLineArchive)

let loadReсent = () => require(recentDBFile)
let saveReсent = (todos) => {writeFileX(recentDBFile, todos); logAll(todos) }
let loadArchive = () => require(archiveDBFile)
let saveArchive = (todos) => {writeFileArchive(archiveDBFile, todos); logArchive(todos) }

commands.init = function () {
  writeFileRecent(recentDBFile, [])
  writeFileArchive(archiveDBFile, [])
  console.log("Ready to work!")
}

commands.list = function () {
  let recentTodos = loadRecent()
  logAll(recentTodos)
}

commands.add = function (text) {
  let recentTodos = loadRecent()
  let addTodos = R.append({text, "done": false}, recentTodos)
  save(addTodos)
}

commands.delete = function (index) {
  let recentTodos = loadRecent()
  let deleteTodos = R.remove(index, 1, recentTodos)
  save(deleteTodos)
}

commands.done = function (index) {
  let recentTodos = loadRecent()
  let doneTodos = R.update(index, R.assoc("done", true, recentTodos[index]), recentTodos)
  save(doneTodos)
}

commands.archive = function () {
  let recentTodos = loadRecent() // загружаем текущие
  let archiveTodos = loadArchive() // загружаем архивные
  let recentTodos2 = R.reject(R.prop("done"), recentTodos) // выбрасываем сделанные из текущих
  let archiveTodos2 = R.concat(R.filter(R.prop("done"), recentTodos), archiveTodos) // добавляем сделанные к архивным
  saveRecent(recentTodos2) // сохраняем новую версию текущих
  saveArchive(archiveTodos2) // сохраняем новую версию архива
}

//command manager

let operation = process.argv[2]

switch (operation) {
  case "init":
    return commands.init()
  case "add":
    let text = process.argv[3]
    return commands.add(text)
  case "list":
    return commands.list()
  case "delete":
    let deleteIndex = Number(process.argv[3]) - 1
    return commands.delete(deleteIndex)
  case "done":
    let doneIndex = Number(process.argv[3]) - 1
    return commands.done(doneIndex)
  case "archive":
    return commands.archive()
  default:
    throw Error(`unsupported operation ${operation}`)
}
