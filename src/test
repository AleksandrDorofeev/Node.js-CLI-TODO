let R = require("ramda")
let resentDBFile = "./todo.json"
let archiveDBFile = "./archive.json"
let FS = require("fs-extra")

//commands

let commands = {}

let writeFileResent = R.curry((resentDBFile, todo) => {
  let str = typeof todo == "string" ? todo : JSON.stringify(todo, null, 2)
  FS.outputFileSync(resentDBFile, str, "utf-8")
})

let writeFileArchive = R.curry((archiveDBFile, todo) => {
  let str = typeof todo == "string" ? todo : JSON.stringify(todo, null, 2)
  FS.outputFileSync(archiveDBFile, str, "utf-8")
})

let rankingArchive = (todo) => {
return Number(todo.status != "archived") // archive == 1, * == 0
}

let ranking = (todo) => {
return Number(todo.status != "active") // archive == 1, * == 0
}

let loadResent = () => require(resentDBFile)
let saveResent = (todos) => {writeFileX(resentDBFile, todos); logAll(todos) }
let loadArchive = () => require(archiveDBFile)
let saveArchive = (todos) => {writeFileArchive(archiveDBFile, todos); logArchive(todos) }

let forEachI = R.addIndex(R.forEach)

let logLine = (todo, i) => {
  console.log(
    todo.done == false ? `[ ] ${i + 1}. ${todo.text}` :
    todo.done == true  ? `[x] ${i + 1}. ${todo.text}` :
                              `` // ignore archived todos
  )
}
let logAll = forEachI(logLine)

let logLineArchive = (todo, i) => {
  console.log(
    todo.done == true ? `[#] ${i + 1}. ${todo.text}` : ``
  )
}
let logArchive = forEachI(logLineArchive)

commands.init = function () {
  let todos = []
  writeFileX(resentDBFile, todos)
  let archive = []
  writeFileX(archiveDBFile, todos)
  console.log("Ready to work!")
}

commands.list = function () {
  let resentTodos = loadResent()
  logAll(resentTodos)
  }

commands.add = function (text) {
  let resentTodos = loadResent()
  let addTodos = R.append({text, "done": false}, resentTodos)
  save(addTodos)
}

commands.delete = function (index) {
  let resentTodos = loadResent()
  let deleteTodos = R.remove(index, 1, resentTodos)
  save(deleteTodos)
}

commands.done = function (index) {
  let resentTodos = loadResent()
  let doneTodos = R.update(index, R.assoc("done", true, resentTodos[index]), resentTodos)
  save(doneTodos)
}

commands.archive = function () {
  let resentTodos = loadResent() // загружаем текущие
  let archiveTodos = loadArchive() // загружаем архивные
  let resentTodos2 = R.reject(R.prop("done"), resentTodos) // выбрасываем сделанные из текущих
  let archiveTodos2 = R.concat(R.filter(R.prop("done"), resentTodos), archiveTodos) // добавляем сделанные к архивным
  saveResent(resentTodos2) // сохраняем новую версию текущих
  saveArchive(archiveTodos2) // сохраняем новую версию архива
}

//command manager

let operation = process.argv[2]

switch (operation) {
  case "init":
    return commands.init()
  case "add":
    let text = process.argv[3]
    return commands.add(text)
  case "list":
    return commands.list()
  case "delete":
    let deleteIndex = Number(process.argv[3]) - 1
    return commands.delete(deleteIndex)
  case "done":
    let doneIndex = Number(process.argv[3]) - 1
    return commands.done(doneIndex)
  case "archive":
    return commands.archive()
  default:
    throw Error(`unsupported operation ${operation}`)
}
